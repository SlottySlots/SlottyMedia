@page "/profile/{UserId:guid}"
@using SlottyMedia.Backend.ViewModel.Interfaces

@inject IProfilePageVm ProfilePageVm
@inject NavigationManager NavigationManager

@if (!ProfilePageVm.IsLoadingPage)
{
    <div class="flex border-b border-athens-gray py-4 w-full">
        <div class="px-4">
            <Avatar Base64PNG="@ProfilePageVm.UserInfo!.ProfilePic"></Avatar>
        </div>

        <div class="px-4 flex flex-col gap-3">
            <h1 class="text-3xl font-medium w-1/4">
                @ProfilePageVm.UserInfo!.Username
            </h1>

            <p class="text-lg">@ProfilePageVm.UserInfo.Description</p>

            <div class="flex w-1/2">
                <h3 class="text-sm text-cadet-gray w-full">Friends: @ProfilePageVm.UserInfo.FriendsAmount</h3>
                <h3 class="text-sm text-cadet-gray w-full">Spaces: @ProfilePageVm.UserInfo.SpacesAmount</h3>
                <h3 class="text-sm text-cadet-gray w-full">Joined at: @ProfilePageVm.UserInfo.CreatedAt.ToString("dd-MMMM-yyyy")</h3>
            </div>
        </div>
        @if (ProfilePageVm.AuthPrincipalId is not null)
        {
            <div class="w-1/4">
                <HotButton OnClick="_handleFollowButtonClicked" Type="button" Class="w-full">
                    @if (ProfilePageVm.IsUserFollowed)
                    {
                        <p>Unfollow</p>
                    }
                    else
                    {
                        <p>Follow</p>
                    }
                </HotButton>
            </div>
        }
    </div>

    @if (!ProfilePageVm.IsLoadingPosts)
    {
        <Pagination Page="ProfilePageVm.Posts" OnPageFetch="ProfilePageVm.LoadPosts" Class="w-full">
            @foreach (var post in ProfilePageVm.Posts)
            {
                <Post Dto="post" CurrentUserId="ProfilePageVm.AuthPrincipalId!.Value" OnPostClick="() => _navigateToPostPage(post.PostId)"/>
            }
        </Pagination>
    }
}
else
{
    <p class="text-3xl font-medium text-center">User not found!</p>
}

@code{

    /// <summary>
    ///     The user id of the profile page
    /// </summary>
    [Parameter]
    public Guid UserId { get; set; }

    /// <summary>
    ///     Called when the component's parameters are set. Initializes the profile page view model with the user ID.
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        await ProfilePageVm.Initialize(UserId);
    }

    /// <summary>
    ///     Navigates to the post page with the specified post ID.
    /// </summary>
    /// <param name="postId">The ID of the post to navigate to.</param>
    private void _navigateToPostPage(Guid postId)
    {
        NavigationManager.NavigateTo($"/post/{postId}");
    }

    /// <summary>
    ///     Handles the follow button click event. Follows or unfollows the user based on the current state.
    /// </summary>
    private async Task _handleFollowButtonClicked()
    {
        if (ProfilePageVm.IsUserFollowed)
            await ProfilePageVm.UnfollowThisUser();
        else
            await ProfilePageVm.FollowThisUser();
        NavigationManager.Refresh(true);
    }

}