@page "/profile"
@using System.Web
@using Microsoft.IdentityModel.Tokens
@using SlottyMedia.Backend.Dtos
@using SlottyMedia.Backend.ViewModel.Interfaces
@using SlottyMedia.Database.Pagination
@using Supabase.Gotrue
@inject NavigationManager NavigationManager
@inject IProfilePageVm ProfilePageVm
@inject IAuthVm AuthService
@if (!_invalidIdFlag)
{
    <div class="flex border-b border-athens-gray py-4 w-full">
        <div class="px-4">
            <Avatar Base64PNG="@UserInformationDto.ProfilePic"></Avatar>
        </div>

        <div class="px-4 flex flex-col gap-3">
            <h1 class="text-3xl font-medium w-1/4">
                @UserInformationDto.Username
            </h1>

            <p class="text-lg">@UserInformationDto.Description</p>

            <div class="flex w-1/2">
                <h3 class="text-sm text-cadet-gray w-full">Friends: @UserInformationDto.FriendsAmount</h3>
                <h3 class="text-sm text-cadet-gray w-full">Spaces: @UserInformationDto.SpacesAmount</h3>
                <h3 class="text-sm text-cadet-gray w-full">Joined at: @UserInformationDto.CreatedAt.ToString("dd-MMMM-yyyy")</h3>
            </div>
        </div>
        @if (_followsUserRetrieved != null)
        {
            <div class="w-1/4">
                <HotButton OnClick="FollowButtonClicked" Type="button" Class="w-full">
                    @if (_followsUserRetrieved == true)
                    {
                        <p>Unfollow</p>
                    }
                    else
                    {
                        <p>Follow</p>
                    }
                </HotButton>
            </div>
        }
    </div>

    @if (!_postsOfUser.IsNullOrEmpty() && _currentUserId != null)
    {
        @foreach (var post in _postsOfUser)
        {
            <Post Dto="post" CurrentUserId=@(_currentUserId)/>
        }
    }
}
else
{
    <p class="text-3xl font-medium text-center">User not found!</p>
}


@code{
    private Guid _profileUserId;

    private Guid _currentUserId;

    private bool? _followsUserRetrieved;

    private bool _invalidIdFlag;

    private List<PostDto> _postsOfUser = new();


    public UserInformationDto UserInformationDto { get; set; } = new()
    {
        Username = "Username is loading..",
        Description = "Description is loading..",
        ProfilePic = null
    };

    protected override async void OnAfterRender(bool firstRender)
    {
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = HttpUtility.ParseQueryString(uri.Query);
        _currentUserId = AuthService.GetCurrentUserId();

        // Retrieve query parameters
        if (queryParams["id"] != null && !_invalidIdFlag)
        {
            try
            {
                _profileUserId = Guid.Parse(queryParams["id"]!);
            }
            catch (Exception)
            {
                _invalidIdFlag = true;
                StateHasChanged();
                return;
            }

            _followsUserRetrieved = await ProfilePageVm.UserFollowRelation(_profileUserId, _currentUserId);
            if (firstRender || UserInformationDto.Username == "Username is loading..")
            {
                var userInfo = await ProfilePageVm.GetUserInfo(_profileUserId);
                if (userInfo != null)
                {
                    UserInformationDto = userInfo;
                    StateHasChanged();
                }
                else
                {
                    _invalidIdFlag = true;
                    StateHasChanged();
                }

                if (_postsOfUser.IsNullOrEmpty())
                {
                    _postsOfUser = await ProfilePageVm.GetPostsByUserId(_profileUserId, PageRequest.OfSize(10));
                    StateHasChanged();
                }
            }
        }
        else
        {
            _invalidIdFlag = true;
        }
    }

    public async void FollowButtonClicked()
    {
        if (_followsUserRetrieved != null && _followsUserRetrieved == true)
        {
            await ProfilePageVm.UnfollowUserById(_currentUserId, _profileUserId);
        }
        else
        {
            await ProfilePageVm.FollowUserById(_currentUserId, _profileUserId);
        }

        _followsUserRetrieved = !_followsUserRetrieved;
        StateHasChanged();
    }

}