<div @onclick="OnClick" class=@("rounded-[24px] px-3 py-1 flex justify-center items-center cursor-pointer " + TagClass + Class)>
    <span class="w-fit text-sm select-none">
        @ChildContent
    </span>
</div>


@code {

    /// <summary>This component represents a tag.</summary>
    /// <exception cref="ArgumentException">If an illegal color was provided.</exception>
    /// <summary>
    ///     The tag's content. Should be a string and start with a hashtag.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    ///     The tag's color.
    ///     Should be one of 'savoy-blue', 'grape', 'fandango', 'crayola-orange', 'jasmine'.
    ///     Default is 'fandango'.
    /// </summary>
    [Parameter]
    public string? Color { get; set; } = "fandango";

    /// <summary>
    ///     Additional CSS classes to apply to the outermost container of this component.
    /// </summary>
    [Parameter]
    public string? Class { get; set; } = "";

    // TODO Discuss the tag color's usability and limit customization as needed! Too many colors & too much variation = bad
    
    /// <summary>An event that is triggered when this tag is clicked.</summary>
    [Parameter]
    public EventCallback OnClick { get; set; }

    /// <summary>
    ///     Computes the final CSS classes based on the given 'Color' parameter.
    /// </summary>
    string TagClass => Color switch
    {
        "savoy-blue" => "text-savoy-blue bg-savoy-blue bg-opacity-40 ",
        "grape" => "text-grape bg-grape bg-opacity-40 ",
        "fandango" => "text-fandango bg-fandango bg-opacity-40 ",
        "crayola-orange" => "text-crayola-orange bg-crayola-orange bg-opacity-40 ",
        "jasmine" => "text-jasmine-400 bg-jasmine bg-opacity-40 ",
        _ => throw new ArgumentException($"Illegal color with name '{Color}'", nameof(Color))
    };

}