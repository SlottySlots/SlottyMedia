@using Microsoft.IdentityModel.Tokens
@using SlottyMedia.Backend.ViewModel.Interfaces
@inject NavigationManager NavigationManager


<div class="w-full px-5 pt-5 grid grid-cols-10 gap-4 border-b border-athens-gray">

    <!-- profile picture -->
    @if (ViewModel is not null && !ViewModel.IsLoading)
    {
        <div @onclick="OnClickAvatar">
            <Avatar OpensFileDialog=false Base64Png="@ViewModel.UserInformation.ProfilePic" Class="!w-[50px] !h-[50px]"></Avatar>
        </div>
    }

    <!-- the form -->
    <form class="col-span-9" @onsubmit="ViewModel!.SubmitForm">

        <!-- the text -->
        <InputArea
            @bind-Value="ViewModel!.Text"
            Id="submit-post-textarea"
            Name="submit-post-textarea"
            Placeholder="What is happening?"
            Class="w-full bg-transparent text-black"/>

        <!-- text error message -->
        @if (ViewModel.TextErrorMessage != null)
        {
            <span class="text-sm text-crayola-orange">
                @ViewModel.TextErrorMessage
            </span>
        }

        <!-- space error message -->
        @if (ViewModel.SpaceErrorMessage != null)
        {
            <span class="text-sm text-crayola-orange">
                @ViewModel.SpaceErrorMessage
            </span>
        }

        <!-- any other internal errors -->
        @if (ViewModel.ServerErrorMessage != null)
        {
            <span class="text-sm text-crayola-orange">
                @ViewModel.ServerErrorMessage
            </span>
        }

        <!-- container for space selection & submission button -->
        <div class="w-full h-[50px] flex justify-between items-center border-t border-athens-gray">

            <!-- space selection -->
            <div class="relative">

                @if (ViewModel.SpaceName.IsNullOrEmpty())
                {
                    <!-- the input -->
                    <input
                        @bind="ViewModel.SpacePrompt"
                        @oninput="_handleInput"
                        id="submit-post-spaces"
                        name="submit-post-spaces"
                        placeholder="#Spaces..."
                        class="border-none outline-none"/>
                }
                else
                {
                    <!-- the space -->
                    <Tag OnClick="ViewModel.HandleSpaceDeselection">
                        #@(ViewModel.SpaceName)
                    </Tag>
                }

                <!-- the tooltip -->
                @if (!ViewModel.SpacePrompt.IsNullOrEmpty())
                {
                    <Card Class="absolute left-0 top-0 translate-y-[40px] p-4 flex flex-col gap-3">
                        @foreach (var spaceName in ViewModel.SearchedSpaces)
                        {
                            <Tag OnClick="() => _selectSpace(spaceName)">
                                #@spaceName
                            </Tag>
                        }
                        @if (ViewModel.SearchedSpaces.Count > 0)
                        {
                            <div class="m-1 border-b border-athens-gray"></div>
                        }
                        <div class="text-sm">
                            Your space doesn't exist?
                            <span @onclick="() => _selectSpace(ViewModel.SpacePrompt!)" class="text-fandango cursor-pointer">
                                Create It
                            </span>
                        </div>
                    </Card>
                }

            </div>

            <!-- submission button -->
            <HotButton Type="submit" Class="w-[115px]">
                Post
            </HotButton>

        </div>

    </form>

</div>

@code {

    /// <summary>
    ///     The ViewModel for this component
    /// </summary>
    [Inject]
    [SupplyParameterFromForm]
    public IPostSubmissionFormVm? ViewModel { get; set; }

    /// <summary>
    ///     An event that is invoked whenever this input field's value changes
    /// </summary>
    [Parameter]
    public EventCallback<string?> ValueChanged { get; set; }

    /// <summary>
    ///     The Id of the User
    /// </summary>
    [Parameter]
    public Guid? UserId { get; set; }


    /// <summary>
    ///     Called after the component has been rendered. Fetches user information if it is the first render.
    /// </summary>
    /// <param name="firstRender">Indicates whether this is the first render</param>
    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender || ViewModel is not null)
        {
            await ViewModel!.Initialize(UserId);
            StateHasChanged();
        }
    }

    /// <summary>
    ///     Navigates to the user's profile page when the avatar is clicked
    /// </summary>
    private void OnClickAvatar()
    {
        NavigationManager.NavigateTo($"/profile?id={UserId!.Value}");
    }

    /// <summary>
    ///     Handles input changes for the space prompt
    /// </summary>
    /// <param name="e">The change event arguments</param>
    async Task _handleInput(ChangeEventArgs e)
    {
        await ViewModel!.HandleSpacePromptChange(e, ValueChanged);
    }

    /// <summary>
    ///     Selects a space based on the provided space name
    /// </summary>
    /// <param name="spaceName">The name of the space to select</param>
    void _selectSpace(string spaceName)
    {
        ViewModel!.HandleSpaceSelection(spaceName);
    }

}