@using Microsoft.IdentityModel.Tokens
@using SlottyMedia.Backend.ViewModel.Interfaces
<div class="w-full px-5 pt-5 grid grid-cols-10 gap-4 border-b border-athens-gray">

    <!-- profile picture -->
    <div class="w-[50px] h-[50px] rounded-full border border-athens-gray">
        <svg width="100%" height="100%" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" fill="#000000">
            <g>
                <path d="m 8 1 c -1.65625 0 -3 1.34375 -3 3 s 1.34375 3 3 3 s 3 -1.34375 3 -3 s -1.34375 -3 -3 -3 z m -1.5 7 c -2.492188 0 -4.5 2.007812 -4.5 4.5 v 0.5 c 0 1.109375 0.890625 2 2 2 h 8 c 1.109375 0 2 -0.890625 2 -2 v -0.5 c 0 -2.492188 -2.007812 -4.5 -4.5 -4.5 z m 0 0" fill="#2e3436"></path>
            </g>
        </svg>
    </div>

    <!-- the form -->
    <form class="col-span-9" @onsubmit="ViewModel!.SubmitForm">

        <!-- the text -->
        <InputArea
            @bind-Value="ViewModel!.Text"
            Id="submit-post-textarea"
            Name="submit-post-textarea"
            Placeholder="What is happening?"
            Class="w-full bg-transparent text-black"/>

        <!-- text error message -->
        @if (ViewModel.TextErrorMessage != null)
        {
            <span class="text-sm text-crayola-orange">
                @ViewModel.TextErrorMessage
            </span>
        }

        <!-- space error message -->
        @if (ViewModel.SpaceErrorMessage != null)
        {
            <span class="text-sm text-crayola-orange">
                @ViewModel.SpaceErrorMessage
            </span>
        }

        <!-- any other internal errors -->
        @if (ViewModel.ServerErrorMessage != null)
        {
            <span class="text-sm text-crayola-orange">
                @ViewModel.ServerErrorMessage
            </span>
        }

        <!-- container for space selection & submission button -->
        <div class="w-full h-[50px] flex justify-between items-center border-t border-athens-gray">

            <!-- space selection -->
            <div class="relative">

                @if (ViewModel.SpaceName.IsNullOrEmpty())
                {
                    <!-- the input -->
                    <input
                        @bind="ViewModel.SpacePrompt"
                        @oninput="_handleInput"
                        id="submit-post-spaces"
                        name="submit-post-spaces"
                        placeholder="#Spaces..."
                        class="border-none outline-none"/>
                }
                else
                {
                    <!-- the space -->
                    <Tag OnClick="ViewModel.HandleSpaceDeselection">
                        #@(ViewModel.SpaceName)
                    </Tag>
                }

                <!-- the tooltip -->
                @if (!ViewModel.SpacePrompt.IsNullOrEmpty())
                {
                    <Card Class="absolute left-0 top-full mt-1 p-4 flex flex-col gap-3">
                        @foreach (var spaceName in ViewModel.SearchedSpaces)
                        {
                            <Tag OnClick="() => _selectSpace(spaceName)">
                                #@spaceName
                            </Tag>
                        }
                        @if (ViewModel.SearchedSpaces.Count > 0)
                        {
                            <div class="m-1 border-b border-athens-gray"></div>
                        }
                        <div class="text-sm">
                            Your space doesn't exist? Create it!
                        </div>
                    </Card>
                }

            </div>

            <!-- submission button -->
            <HotButton Type="submit" Class="w-[115px]">
                Post
            </HotButton>

        </div>

    </form>

</div>


@code {
    [Inject] [SupplyParameterFromForm] public IPostSubmissionFormVm? ViewModel { get; set; }

    /// An event that is invoked whenever this input field's value changes
    [Parameter]
    public EventCallback<string?> ValueChanged { get; set; }

    async Task _handleInput(ChangeEventArgs e)
    {
        await ViewModel!.HandleSpacePromptChange(e, ValueChanged);
    }

    async Task _selectSpace(string spaceName)
    {
        await ViewModel!.HandleSpaceSelection(spaceName);
    }

}