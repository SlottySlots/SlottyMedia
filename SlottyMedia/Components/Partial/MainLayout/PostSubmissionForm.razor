@using Microsoft.IdentityModel.Tokens
@using SlottyMedia.Backend.Dtos
@using SlottyMedia.Backend.Services.Interfaces
@using SlottyMedia.Backend.ViewModel.Interfaces
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
<div class="w-full px-5 pt-5 grid grid-cols-10 gap-4 border-b border-athens-gray">

    <!-- profile picture -->
    @if (!_isLoading)
    {
        <div @onclick="OnClickAvatar">
            <Avatar OpensFileDialog=false Base64Png="@UserInformationDto.ProfilePic" Size="50"></Avatar>
        </div> 
    }
    

    <!-- the form -->
    <form class="col-span-9" @onsubmit="ViewModel!.SubmitForm">

        <!-- the text -->
        <InputArea
            @bind-Value="ViewModel!.Text"
            Id="submit-post-textarea"
            Name="submit-post-textarea"
            Placeholder="What is happening?"
            Class="w-full bg-transparent text-black"/>

        <!-- text error message -->
        @if (ViewModel.TextErrorMessage != null)
        {
            <span class="text-sm text-crayola-orange">
                @ViewModel.TextErrorMessage
            </span>
        }

        <!-- space error message -->
        @if (ViewModel.SpaceErrorMessage != null)
        {
            <span class="text-sm text-crayola-orange">
                @ViewModel.SpaceErrorMessage
            </span>
        }

        <!-- any other internal errors -->
        @if (ViewModel.ServerErrorMessage != null)
        {
            <span class="text-sm text-crayola-orange">
                @ViewModel.ServerErrorMessage
            </span>
        }

        <!-- container for space selection & submission button -->
        <div class="w-full h-[50px] flex justify-between items-center border-t border-athens-gray">

            <!-- space selection -->
            <div class="relative">

                @if (ViewModel.SpaceName.IsNullOrEmpty())
                {
                    <!-- the input -->
                    <input
                        @bind="ViewModel.SpacePrompt"
                        @oninput="_handleInput"
                        id="submit-post-spaces"
                        name="submit-post-spaces"
                        placeholder="#Spaces..."
                        class="border-none outline-none"/>
                }
                else
                {
                    <!-- the space -->
                    <Tag OnClick="ViewModel.HandleSpaceDeselection">
                        #@(ViewModel.SpaceName)
                    </Tag>
                }

                <!-- the tooltip -->
                @if (!ViewModel.SpacePrompt.IsNullOrEmpty())
                {
                    <Card Class="absolute left-0 top-full mt-1 p-4 flex flex-col gap-3">
                        @foreach (var spaceName in ViewModel.SearchedSpaces)
                        {
                            <Tag OnClick="() => _selectSpace(spaceName)">
                                #@spaceName
                            </Tag>
                        }
                        @if (ViewModel.SearchedSpaces.Count > 0)
                        {
                            <div class="m-1 border-b border-athens-gray"></div>
                        }
                        <div class="text-sm">
                            Your space doesn't exist? Create it!
                        </div>
                    </Card>
                }

            </div>

            <!-- submission button -->
            <HotButton Type="submit" Class="w-[115px]">
                Post
            </HotButton>

        </div>

    </form>

</div>


@code {
    [Inject] [SupplyParameterFromForm] public IPostSubmissionFormVm? ViewModel { get; set; }

    /// An event that is invoked whenever this input field's value changes
    [Parameter]
    public EventCallback<string?> ValueChanged { get; set; }
    
    public UserInformationDto UserInformationDto { get; set; } = new()
    {
        Username = "Username is loading..",
        Description = "Description is loading..",
        ProfilePic = null
    };

    private bool _isLoading = true;
    
    protected override async void OnAfterRender(bool firstRender)
    {
        if ((firstRender || UserInformationDto.Username == "Username is loading.."))
        {
            var userInfo = await UserService.GetUserInfo(Guid.Parse(AuthService!.GetCurrentSession()!.User!.Id!));
            if (userInfo != null)
            {
                UserInformationDto.Username = userInfo.Username;
                UserInformationDto.UserId = userInfo.UserId;
                UserInformationDto.Description = userInfo.Description;
                UserInformationDto.ProfilePic = userInfo.ProfilePic;
                UserInformationDto.FriendsAmount = userInfo.FriendsAmount;
                UserInformationDto.SpacesAmount = userInfo.SpacesAmount;
                _isLoading = false;
                StateHasChanged();
            }
        }
    }

    private void OnClickAvatar()
    {
        NavigationManager.NavigateTo($"/profile?id={UserInformationDto.UserId.ToString()}");
    }
    
    async Task _handleInput(ChangeEventArgs e)
    {
        await ViewModel!.HandleSpacePromptChange(e, ValueChanged);
    }

    void _selectSpace(string spaceName)
    {
        ViewModel!.HandleSpaceSelection(spaceName);
    }

}