<div class="w-full h-[49px] px-1 flex items-center gap-3 rounded-[24px] bg-cadet-gray-100 text-cadet-gray-800">
    @ChildContent
    <input
        id="@Id"
        name="@Name"
        placeholder="@Placeholder"
        type="@Type"
        @bind="Value"
        @oninput="_handleInput"
        @onkeydown="HandleKeyDown"
        class="grow h-full outline-none bg-transparent w-full text-cadet-gray-800"/>
</div>

@code {

    /// <summary>The input field's icon. Should be a "InputFieldIcon" component.</summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>The input field's ID</summary>
    [Parameter]
    public string? Id { get; set; }

    /// <summary>The input field's name</summary>
    [Parameter]
    public string? Name { get; set; }

    /// The input field's placeholder
    [Parameter]
    public string? Placeholder { get; set; }

    /// The input field's type
    [Parameter]
    public string? Type { get; set; }

    /// The input field's value. Use data binding (@bind-Value) instead of manually setting this field!
    [Parameter]
    public string? Value { get; set; }

    /// An event that is invoked whenever this input field's value changes
    [Parameter]
    public EventCallback<string?> ValueChanged { get; set; }

    async Task _handleInput(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            var newValue = e.Value.ToString();
            await ValueChanged.InvokeAsync(newValue);
        }
    }

    //An Event invoked when Enter is pressed
    [Parameter] public EventCallback OnEnter { get; set; }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await OnEnter.InvokeAsync();
        }
    }

}