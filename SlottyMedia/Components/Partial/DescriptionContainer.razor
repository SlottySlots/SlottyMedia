@using SlottyMedia.Backend.ViewModel.Interfaces

@if (_showDescriptionText)
{
    <h3 class="text-sm font-medium text-center text-cadet-gray w-fit" @onclick="SubmitDescriptionText">
        @DescriptionText
    </h3>
}
else
{
    <InputField
        Id="description-input-field"
        Name="description"
        @bind-Value="DescriptionText"
        OnEnter="SubmitDescriptionText">
        <InputFieldIcon>
            <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" @onclick="SubmitDescriptionText">
                <path d="M1 8H15" stroke="#A0A0A0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M8 1L15 8L8 15" stroke="#A0A0A0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
        </InputFieldIcon>
    </InputField>
}

@code {
    /// <summary>
    /// The description text to be displayed or edited.
    /// </summary>
    [Parameter] public string? DescriptionText { get; set; }

    /// <summary>
    /// Service for user-related operations.
    /// </summary>
    [Inject] public IUserVm? UserVm { get; private set; }

    /// <summary>
    /// Service for authentication-related operations.
    /// </summary>
    [Inject] public IAuthVm? AuthVm { get; set; }

    /// <summary>
    /// Flag to determine whether to show the description text or the input field.
    /// </summary>
    private bool _showDescriptionText = true;

    /// <summary>
    /// Submits the description text. If the user is authenticated and the description text is valid,
    /// it updates the user's description.
    /// </summary>
    private async void SubmitDescriptionText()
    {
        if (AuthVm is null || UserVm is null)
        {
            return;
        }

        var idOfUser = AuthVm.GetCurrentUserId();
        if (idOfUser != Guid.Empty)
        {
            _showDescriptionText = !_showDescriptionText;
            var userDao = await UserVm.GetUserById(idOfUser);
            if (DescriptionText != userDao.Description)
            {
                if (DescriptionText is not null && DescriptionText.Length < 200)
                {
                    // TODO: Show error message and prevent submission
                    userDao.Description = DescriptionText;
                    await UserVm.UpdateUser(userDao);
                }
            }
        }
    }

    /// <summary>
    /// Handles the enter key click event to submit the description text.
    /// </summary>
    private void HandleEnterClick()
    {
        SubmitDescriptionText();
    }
}