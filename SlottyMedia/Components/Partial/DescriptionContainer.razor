@using SlottyMedia.Backend.Services.Interfaces
@using SlottyMedia.Database
@using SlottyMedia.Database.Daos
@if (ShowDescriptionText)
{
    <h3 class="text-sm font-medium text-center text-cadet-gray w-fit" @onclick="SubmitDescriptionText">
        @DescriptionText
    </h3>
}
else
{
    <InputField
        Id="description-input-field"
        Name="description"
        @bind-Value="DescriptionText"
        OnEnter="SubmitDescriptionText">
        <InputFieldIcon>
            <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" @onclick="SubmitDescriptionText">
                <path d="M1 8H15" stroke="#A0A0A0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M8 1L15 8L8 15" stroke="#A0A0A0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
        </InputFieldIcon>
    </InputField>
}


@code {
    [Parameter] public string? DescriptionText { get; set; }
    [Inject] public IDatabaseActions DatabaseActions { get; private set; }
    [Inject] public IAuthService AuthService { get; set; }

    private bool ShowDescriptionText = true;

    private async void SubmitDescriptionText()
    {
        var emailOfUser = AuthService.GetCurrentSession()?.User!.Email;
        if (emailOfUser != null)
        {
            ShowDescriptionText = !ShowDescriptionText;
            var userDao = await DatabaseActions.GetEntityByField<UserDao>("email", emailOfUser);
            userDao.Description = DescriptionText;
            await DatabaseActions.Update(userDao);
        }
    }


    private void HandleEnterClick()
    {
        SubmitDescriptionText();
    }

}