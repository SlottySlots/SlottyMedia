@using SlottyMedia.Backend.ViewModel.Partial.DescriptionContainer


@if (DescriptionContainerVm is not null && DescriptionContainerVm.ShowDescriptionText)
{
    <h3 class="text-sm font-medium text-center text-cadet-gray w-fit" @onclick="SubmitDescriptionText">
        @DescriptionText
    </h3>
}
else
{
    <InputField
        Id="description-input-field"
        Name="description"
        @bind-Value="DescriptionText"
        OnEnter="SubmitDescriptionText">
        <InputFieldIcon>
            <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" @onclick="SubmitDescriptionText">
                <path d="M1 8H15" stroke="#A0A0A0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M8 1L15 8L8 15" stroke="#A0A0A0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
        </InputFieldIcon>
    </InputField>
}

@code {

    /// <summary>
    ///     The description text to be displayed or edited.
    /// </summary>
    [Parameter]
    public string? DescriptionText { get; set; }

    /// <summary>
    ///     The user id to update the description text.
    /// </summary>
    [Parameter]
    public Guid? UserId { get; set; }

    /// <summary>
    ///     The Vm to handle the description text.
    /// </summary>
    [Inject]
    private IDescriptionContainerVm? DescriptionContainerVm { get; set; }

    /// <summary>
    ///     Handles the enter key click event to submit the description text.
    /// </summary>
    private async Task HandleEnterClick()
    {
        if (DescriptionContainerVm is not null)
        {
            await DescriptionContainerVm.SubmitDescriptionAsync(DescriptionText, UserId);
        }
    }

    private async Task SubmitDescriptionText()
    {
        if (DescriptionContainerVm is not null)
        {
            await DescriptionContainerVm.SubmitDescriptionAsync(DescriptionText, UserId);
        }
    }

}