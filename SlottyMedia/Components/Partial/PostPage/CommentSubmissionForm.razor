@using SlottyMedia.Backend.Dtos
@using SlottyMedia.Backend.Services.Interfaces
@using SlottyMedia.Backend.ViewModel.Interfaces
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
<div class="w-full px-5 py-3 grid grid-cols-10 gap-4 border-y border-athens-gray">

    <!-- profile picture -->
    @if (!_isLoading)
    {
    <div @onclick="OnClickAvatar">
        <Avatar OpensFileDialog=false Base64Png="@UserInformationDto.ProfilePic" Size="50"></Avatar>
    </div>
    }

    <!-- the form -->
    <form class="col-span-9" @onsubmit="() => ViewModel!.SubmitForm(PostId!.Value)">

        <!-- the text -->
        <InputArea
            @bind-Value="ViewModel!.Text"
            Id="submit-comment-textarea"
            Name="submit-comment-textarea"
            Placeholder="Reply to this post"
            Class="w-full bg-transparent text-black"/>

        <!-- text error message -->
        @if (ViewModel!.TextErrorMessage is not null)
        {
            <span class="text-sm text-crayola-orange">
                @ViewModel.TextErrorMessage
            </span>
        }

        <!-- any other internal errors -->
        @if (ViewModel.ServerErrorMessage is not null)
        {
            <span class="text-sm text-crayola-orange">
                @ViewModel.ServerErrorMessage
            </span>
        }

        <!-- bottom section -->
        <div class="w-full h-[50px] flex justify-end items-center">

            <!-- submission button -->
            <HotButton Type="submit" Class="w-[115px]">
                Reply
            </HotButton>

        </div>

    </form>

</div>


@code {

    /// <summary>The ID of the post to submit a comment for</summary>
    [Parameter]
    public Guid? PostId { get; set; }

    /// <summary>The ViewModel for this component</summary>
    [Inject]
    [SupplyParameterFromForm]
    public ICommentSubmissionFormVm? ViewModel { get; set; }
    
    public UserInformationDto UserInformationDto { get; set; } = new()
    {
        Username = "Username is loading..",
        Description = "Description is loading..",
        ProfilePic = null
    };

    private bool _isLoading = true;
    
    protected override async void OnAfterRender(bool firstRender)
    {
        if ((firstRender || UserInformationDto.Username == "Username is loading.."))
        {
            var userInfo = await UserService.GetUserInfo(Guid.Parse(AuthService!.GetCurrentSession()!.User!.Id!));
            if (userInfo != null)
            {
                UserInformationDto.Username = userInfo.Username;
                UserInformationDto.UserId = userInfo.UserId;
                UserInformationDto.Description = userInfo.Description;
                UserInformationDto.ProfilePic = userInfo.ProfilePic;
                UserInformationDto.FriendsAmount = userInfo.FriendsAmount;
                UserInformationDto.SpacesAmount = userInfo.SpacesAmount;
                _isLoading = false;
                StateHasChanged();
            }
        }
    }

    private void OnClickAvatar()
    {
        NavigationManager.NavigateTo($"/profile?id={UserInformationDto.UserId.ToString()}");
    }

}