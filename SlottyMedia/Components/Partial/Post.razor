@using SlottyMedia.Backend.Dtos
@using SlottyMedia.Backend.ViewModel.Interfaces
@inject NavigationManager NavigationManager;

@if (Dto is not null && PostVm is not null && !PostVm.IsLoading)
{
    <div class="w-full p-5 grid grid-cols-10 gap-4">

        <!-- profile picture -->
        <div @onclick="OnClickAvatar">
            <Avatar OpensFileDialog=false Base64Png="@PostVm.UserInformation.ProfilePic" Class="!w-[50px] !h-[50px]"></Avatar>
        </div>

        <!-- username & time posted -->
        <div class="col-span-9 flex flex-col justify-between cursor-pointer" @onclick="() => _navigateToProfile(PostVm.UserInformation.UserId)">
            <h3 class="text-xl font-semibold">
                @(PostVm.UserInformation.Username)
            </h3>
            <h3 class="text-sm font-medium text-cadet-gray">
                @(Dto!.CreatedAt.ToShortTimeString())
            </h3>
        </div>

        <!-- this cell is just for filling the grid! -->
        <div></div>

        <!-- actual text -->
        <div class="col-span-9 break-words">
            @(Dto!.Content)
        </div>

        <!-- this cell is just for filling the grid! -->
        <div></div>

        <!-- actions -->
        <div class="col-span-9 flex gap-12 select-none">

            <!-- comments -->
            <div @onclick="OnPostClick" class="flex gap-3 items-center cursor-pointer">

                <!-- icon -->
                <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M14 25.6667C20.4433 25.6667 25.6667 20.4433 25.6667 14C25.6667 7.55667 20.4433 2.33333 14 2.33333C7.55672 2.33333 2.33337 7.55667 2.33337 14C2.33337 15.8663 2.7716 17.6302 3.55074 19.1946C3.7578 19.6103 3.82672 20.0854 3.70668 20.534L3.0118 23.1311C2.71015 24.2585 3.74155 25.2898 4.86895 24.9882L7.466 24.2934C7.91463 24.1733 8.38979 24.2423 8.80549 24.4492C10.3698 25.2285 12.1337 25.6667 14 25.6667Z" stroke="#A0A0A0" stroke-width="1.5"/>
                    <path d="M9.33337 12.25H18.6667" stroke="#A0A0A0" stroke-width="1.5" stroke-linecap="round"/>
                    <path d="M9.33337 16.3333H15.75" stroke="#A0A0A0" stroke-width="1.5" stroke-linecap="round"/>
                </svg>

                <!-- number of comments -->
                <span class="text-cadet-gray">
                    @PostVm.CommentCount
                </span>

            </div>

            <!-- like button -->
            <div class="flex gap-3 items-center">
                <LikeButton Initial="@PostVm.InitLiked" OnClick="LikeClick"/>
                <span class="text-cadet-gray">
                    @PostVm.LikeCount
                </span>
            </div>

        </div>

    </div>
}


@if (Dto is not null && PostVm is not null && PostVm.IsLoading)
{
    <div>
        Loading...
    </div>
}


@code
{
    /// <summary>
    ///     The post to be rendered.
    /// </summary>
    [Parameter]
    public PostDto? Dto { get; set; }

    /// <summary>
    ///     The current logged in user id to propagate towards like component.
    /// </summary>
    [Parameter]
    public Guid CurrentUserId { get; set; }

    /// <summary>
    ///     This event is triggered when the post's comment button is clicked.
    ///     This event will be used to navigate to the post's dedicated page from the home page (i.e. <c>/post/{ID}</c>).
    ///     On the post's dedicated page this event should be left unset.
    /// </summary>
    [Parameter]
    public EventCallback OnPostClick { get; set; }


    /// <summary>
    ///     Injected instance of the IPostVm interface.
    /// </summary>
    [Inject]
    public IPostVm? PostVm { get; set; }

    /// <inheritdoc />
    protected override async Task OnParametersSetAsync()
    {
        if (PostVm is null || Dto is null)
        {
            return;
        }

        await PostVm.Initialize(Dto.PostId, Dto.UserId);
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (PostVm is null || Dto is null)
            return;
        if (firstRender || PostVm.UserInformation.Username == "Username is loading..")
        {
            await PostVm.GetUserInformation(Dto.UserId, firstRender);
            StateHasChanged(); 
        }

    }


    /// <summary>
    ///     Handles the click event on the avatar, navigating to the user's profile page.
    /// </summary>
    private void OnClickAvatar()
    {
        NavigationManager.NavigateTo($"/profile/{CurrentUserId.ToString()}");
    }

    private void _navigateToProfile(Guid? userId)
    {
        NavigationManager.NavigateTo($"/profile/{userId}");
    }

    /// <summary>
    ///     Handles the click event on the like button, adding or removing a like based on the current state.
    /// </summary>
    public async void LikeClick()
    {
        if (PostVm is null)
        {
            return;
        }

        await PostVm.LikePost(Dto.PostId, CurrentUserId);
    }
}