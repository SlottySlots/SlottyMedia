@inject IJSRuntime JsRuntime

<div class="@Size " @onmouseenter="MouseOver" @onmouseleave="MouseLeave" @onclick="OpenFileDialog">
    @if (!_mouseOverAvatar)
    {
        <img class="h-full w-full rounded-full" src=@Base64Png alt="Profile Picture">
    }
    else
    {
        <div class="relative opacity-50 @Size">
            <img class="h-full w-full rounded-full" src="@Base64Png" alt="Profile Picture">
            @ChildContent
        </div>
    }
</div>
<InputFile id="fileInput" OnChange="OnFileSelected" accept=".png,.jpg" hidden></InputFile>


@code {

    /// <summary>
    ///     RenderFragment to render a pictogram into the avatar when a action should be done on clicking an avatar.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private string? _base64Png;

    /// <summary>
    ///     Sets a Base64Png. Gets the currently set base64png variable if set. If not set it gets the path of the standard
    ///     profile picture.
    /// </summary>
    [Parameter]
    public string Base64Png
    {
        private get => string.IsNullOrEmpty(_base64Png) ? "static/profilePic.png" : $"data:image/png;base64, {_base64Png}";
        set => _base64Png = value;
    }

    /// <summary>
    ///     Flag to mark the avatar as changeable. Hence the onclick event will open a file dialog.
    /// </summary>
    [Parameter]
    public bool OpensFileDialog { get; set; }

    /// <summary>
    ///     Callback triggered whenever a User selects a new file. It invokes the image as base64 encoded string
    /// </summary>
    [Parameter]
    public EventCallback<string> Base64Callback { get; set; }

    private string _size = "80";

    /// <summary>
    ///     Sets the size of the avatar
    /// </summary>
    [Parameter]
    public string Size
    {
        get => $"h-[{_size}px] w-[{_size}px]";
        set => _size = value;
    }

    private async void OpenFileDialog()
    {
        if (OpensFileDialog)
            await JsRuntime.InvokeVoidAsync("OpenFileDialog", "fileInput");
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file.ContentType.Contains("image"))
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            var base64String = Convert.ToBase64String(buffer);
            Base64Png = base64String;
            await Base64Callback.InvokeAsync(base64String);
        }
    }


    private bool _mouseOverAvatar = false;

    private void MouseOver()
    {
        _mouseOverAvatar = true;
    }

    private void MouseLeave()
    {
        _mouseOverAvatar = false;
    }

}